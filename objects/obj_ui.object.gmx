<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cam_surface = -1;
u_time = shader_get_uniform(shaderCamera, "time");
time = random(100.0);
window_w = window_get_width();
window_h = window_get_height();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time += delta_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera Surface Draw

    //Draw View
    shader_set(shaderCamera);
    /*
    ////////////////////////////////////////////////////////////////////////////////////////
    //Blur
    shader_set_uniform_f(sigma, blur_radius);
    shader_set_uniform_f(blur_size, 1.0 / global.res_x);
    ////////////////////////////////////////////////////////////////////////////////////////
    //Color Correction
    texture_set_stage(color_curve, background_get_texture(bac_colorcurve));
    texture_set_stage(vignette, background_get_texture(bac_vignette));
    ////////////////////////////////////////////////////////////////////////////////////////
    */
    shader_set_uniform_f(u_time,time);
    draw_surface(view_surface_id[0], 0, 0);
    shader_reset();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UI Start
var ox, oy;
ox = 16;
oy = 16;
draw_sprite(spr_ui_covenants_left, 0, ox, oy);
draw_sprite(spr_ui_covenants_icon, 1, ox, oy);

var hp, ep, hollow;
hp = 100;
ep = 50;
hollow = 0;

if (hollow &gt;= 0)
{
    draw_sprite_ext(spr_ui_hp_mid, 0, ox + 46, oy + 10, hp - 3, 1, 0, c_white, 1);
}
else
{
    draw_sprite_ext(spr_ui_hp_mid, 0, ox + 46, oy + 10, hp, 1, 0, c_white, 1);
}

draw_sprite_ext(spr_ui_ep_mid, 0, ox + 46, oy + 16, ep - 2, 1, 0, c_white, 1);

draw_sprite(spr_ui_hp_right, 0, ox + 46 + hp - 14, oy + 10);
draw_sprite(spr_ui_ep_right, 0, ox + 46 + ep - 9, oy + 16);

//Shader Test
shader_set(shaderPhantom);
var u = shader_get_uniform(shaderPhantom, "phantomColor");
shader_set_uniform_f(u, 1.0, 0.0, 0.0, 1.0);
draw_sprite(spr_test, 0, 320 + 64, 160)
shader_reset();

draw_sprite_ext(spr_test, 0, 128, 160, -1, 1, 0, c_white, 1)

if (!surface_exists(cam_surface))
{
    cam_surface = surface_create(window_w, window_h);
    surface_set_target(cam_surface);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
    view_surface_id[0] = cam_surface;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
